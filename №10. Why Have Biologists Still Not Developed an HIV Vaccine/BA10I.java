// Implement Viterbi Learning
// --------------------------
//
// Viterbi learning
//
// Given: A sequence of emitted symbols x = x1 ... xn in an alphabet A, generated by a k-state HMM
// with unknown transition and emission probabilities, initial Transition and Emission matrices and
// a number of iterations i.
//
// Return: A matrix of transition probabilities Transition and a matrix of emission probabilities
// Emission that maximizes Pr(x, π) over all possible transition and emission matrices and over all
// hidden paths π.
//
// Sample Dataset
// --------------
// 100
// --------
// xxxzyzzxxzxyzxzxyxxzyzyzyyyyzzxxxzzxzyzzzxyxzzzxyzzxxxxzzzxyyxzzzzzyzzzxxzzxxxyxyzzyxzxxxyxzyxxyzyxz
// --------
// x   y   z
// --------
// A   B
// --------
//     A   B
// A   0.582   0.418
// B   0.272   0.728
// --------
//     x   y   z
// A   0.129   0.35    0.52
// B   0.422   0.151   0.426
// --------------
//
// Sample Output
// -------------
//  A   B
// A   0.875   0.125
// B   0.011   0.989
// --------
//     x   y   z
// A   0.0 0.75    0.25
// B   0.402   0.174   0.424
// -------------

import auxil.HMM;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;

public class BA10I {

    private static Map.Entry<List<List<Double>>, List<List<Double>>> ViterbiLearningMachinery(
            String emitted, Map<Character, Integer> alphabet, Map<Character, Integer> states,
            List<List<Double>> transProbs, List<List<Double>> emissionProbs, int nIters
    ) {
        List<Character> alphabetList = BA10UTIL.getOrderedListOfMapKeys(alphabet);
        List<Character> statesList = BA10UTIL.getOrderedListOfMapKeys(states);
        Map<Character, Map<Character, Double>> transition, emission;
        HMM hmm;
        String path;
        Map.Entry<List<List<Double>>, List<List<Double>>> parameters;

        for (int i = 0; i != nIters; ++i) {
            transition = BA10UTIL.parameterMatrixToParameterMap(transProbs, statesList, statesList);
            emission = BA10UTIL.parameterMatrixToParameterMap(emissionProbs, statesList, alphabetList);
            hmm = new HMM(alphabetList, statesList, transition, emission);
            path = BA10C.ViterbiAlgorithm(emitted, hmm);
            parameters = BA10H.estimateHmmParameters(emitted, alphabet, path, states);
            transProbs = parameters.getKey();
            emissionProbs = parameters.getValue();
        }

        return Map.entry(transProbs, emissionProbs);
    }

    public static Map.Entry<List<List<Double>>, List<List<Double>>> ViterbiLearning(
            String emitted, Map<Character, Integer> alphabet, Map<Character, Integer> states,
            List<List<Double>> transProbs, List<List<Double>> emissionProbs, int nIters
    ) {
        return ViterbiLearningMachinery(
                emitted, alphabet, states, transProbs, emissionProbs, nIters
        );
    }

    public static Map.Entry<List<List<Double>>, List<List<Double>>> ViterbiLearning(Path path) {
        List<String> strDataset = UTIL.readDataset(path);
        int sepIdx = strDataset.lastIndexOf(BA10UTIL.separator);
        return ViterbiLearningMachinery(
                strDataset.get(2),
                BA10UTIL.parseCharacterArrayToMap(strDataset.get(4), "\\s+"),
                BA10UTIL.parseCharacterArrayToMap(strDataset.get(6), "\\s+"),
                BA10UTIL.parseParameterMatrix(strDataset.subList(8, sepIdx)),
                BA10UTIL.parseParameterMatrix(strDataset.subList(sepIdx + 1, strDataset.size())),
                Integer.parseInt(strDataset.getFirst())
        );
    }

    @SuppressWarnings("CallToPrintStackTrace")
    private void run() {
        List<String> strDataset = UTIL.readDataset(
                Path.of(
                        "/home/surelye/Downloads/rosalind_files/ba10/rosalind_ba10i.txt"
                )
        );
        int sepIdx = strDataset.lastIndexOf(BA10UTIL.separator);
        int nIters = Integer.parseInt(strDataset.getFirst());
        String emitted = strDataset.get(2);
        Map<Character, Integer> alphabet = BA10UTIL.parseCharacterArrayToMap(strDataset.get(4), "\\s+");
        Map<Character, Integer> states = BA10UTIL.parseCharacterArrayToMap(strDataset.get(6), "\\s+");
        List<List<Double>> transitionProbabilities = BA10UTIL.parseParameterMatrix(strDataset.subList(8, sepIdx));
        List<List<Double>> emissionProbabilities = BA10UTIL.parseParameterMatrix(
                strDataset.subList(sepIdx + 1, strDataset.size())
        );

        Map.Entry<List<List<Double>>, List<List<Double>>> optionalParameters = ViterbiLearning(
                emitted, alphabet, states, transitionProbabilities, emissionProbabilities, nIters
        );
        List<Character> rowLabels = BA10UTIL.getOrderedListOfMapKeys(states);
        List<Character> colLabels = BA10UTIL.getOrderedListOfMapKeys(alphabet);


        try (FileWriter fw = new FileWriter("ba10i_out.txt")) {
            BA10UTIL.writeMatrixToFile(optionalParameters.getKey(), fw, rowLabels, rowLabels);
            fw.write("%s%c".formatted(BA10UTIL.separator, '\n'));
            BA10UTIL.writeMatrixToFile(optionalParameters.getValue(), fw, rowLabels, colLabels);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new BA10I().run();
    }
}
