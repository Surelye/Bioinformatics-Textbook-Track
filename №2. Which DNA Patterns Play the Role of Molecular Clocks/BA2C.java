// Find a Profile-most Probable k-mer in a String
// ----------------------------------------------
//
// Given a profile matrix Profile, we can evaluate the probability of every k-mer in a string Text
// and find a Profile-most probable k-mer in Text, i.e., a k-mer that was most likely to have been
// generated by Profile among all k-mers in Text. For example, ACGGGGATTACC is the Profile-most
// probable 12-mer in GGTACGGGGATTACCT. Indeed, every other 12-mer in this string has probability
// 0.
//
// In general, if there are multiple Profile-most probable k-mers in Text, then we select the first
// such k-mer occurring in Text.
//
// -----------------------------------
// Profile-most Probable k-mer Problem
//
// Find a Profile-most probable k-mer in a string.
//
// Given: A string Text, an integer k, and a 4 Ã— k matrix Profile.
//
// Return: A Profile-most probable k-mer in Text. (If multiple answers exist, you may return any
// one.)
//
// Sample Dataset
// --------------
// ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
// 5
// 0.2 0.2 0.3 0.2 0.3
// 0.4 0.3 0.1 0.5 0.1
// 0.3 0.3 0.5 0.2 0.4
// 0.1 0.2 0.1 0.1 0.2
// --------------
//
// Sample Output
// -------------
// CCGAG
// -------------

import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

public class BA2C {

    private static String
    profileMostProbableKMerMachinery(String text, int k, double[][] profile) {
        int textLength = text.length(), index;
        double maxProb = Double.MIN_VALUE;
        String mostProbable = text.substring(0, k);

        for (int i = 0; i < textLength - k + 1; ++i) {
            String pattern = text.substring(i, i + k);
            double prob = 1D;

            for (int j = 0; j < k; ++j) {
                index = BA2UTIL.symbolToIndex(pattern.charAt(j));
                prob *= profile[index][j];
            }
            if (prob > maxProb) {
                maxProb = prob;
                mostProbable = pattern;
            }
        }

        return mostProbable;
    }

    public static String profileMostProbableKMer(Path path) {
        List<String> strDataset = UTIL.readDataset(path);
        String text = strDataset.getFirst();
        int k = Integer.parseInt(strDataset.get(1));
        double[][] profile = new double[4][k];

        for (int i = 2; i < 6; ++i) {
            profile[i - 2] = Arrays.stream(strDataset
                    .get(i)
                    .split("\\s+"))
                    .mapToDouble(Double::parseDouble)
                    .toArray();
        }

        return profileMostProbableKMerMachinery(text, k, profile);
    }

    public static String profileMostProbableKMer(String text, int k, double[][] profile) {
        return profileMostProbableKMerMachinery(text, k, profile);
    }
}
